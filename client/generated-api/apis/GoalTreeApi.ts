// tslint:disable
/**
 * Lappuzet
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    EditGoalTreeNodeDto,
    GoalTreeDto,
    GoalTreeFullDto,
    GoalTreeNodeDto,
    NewGoalTreeDto,
    NewGoalTreeNodeDto,
} from '../models';

export interface DeleteGoalTreeNodeRequest {
    treeId: number;
    nodeId: number;
}

export interface EditGoalTreeNodeRequest {
    treeId: number;
    nodeId: number;
    editGoalTreeNodeDto: EditGoalTreeNodeDto;
}

export interface LoadGoalTreeRequest {
    treeId: number;
}

export interface MoveGoalTreeNodeRequest {
    movedNode: number;
    targetNode: number;
}

export interface NewGoalTreeRequest {
    newGoalTreeDto: NewGoalTreeDto;
}

export interface NewGoalTreeNodeRequest {
    treeId: number;
    newGoalTreeNodeDto: NewGoalTreeNodeDto;
}

/**
 * no description
 */
export class GoalTreeApi extends BaseAPI {

    /**
     * Deletes a node
     */
    deleteGoalTreeNode({ treeId, nodeId }: DeleteGoalTreeNodeRequest): Observable<GoalTreeFullDto>
    deleteGoalTreeNode({ treeId, nodeId }: DeleteGoalTreeNodeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeFullDto>>
    deleteGoalTreeNode({ treeId, nodeId }: DeleteGoalTreeNodeRequest, opts?: OperationOpts): Observable<GoalTreeFullDto | RawAjaxResponse<GoalTreeFullDto>> {
        throwIfNullOrUndefined(treeId, 'treeId', 'deleteGoalTreeNode');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'deleteGoalTreeNode');

        return this.request<GoalTreeFullDto>({
            url: '/goaltree/{treeId}/node/{nodeId}'.replace('{treeId}', encodeURI(treeId)).replace('{nodeId}', encodeURI(nodeId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Edits a node
     */
    editGoalTreeNode({ treeId, nodeId, editGoalTreeNodeDto }: EditGoalTreeNodeRequest): Observable<GoalTreeNodeDto>
    editGoalTreeNode({ treeId, nodeId, editGoalTreeNodeDto }: EditGoalTreeNodeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeNodeDto>>
    editGoalTreeNode({ treeId, nodeId, editGoalTreeNodeDto }: EditGoalTreeNodeRequest, opts?: OperationOpts): Observable<GoalTreeNodeDto | RawAjaxResponse<GoalTreeNodeDto>> {
        throwIfNullOrUndefined(treeId, 'treeId', 'editGoalTreeNode');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'editGoalTreeNode');
        throwIfNullOrUndefined(editGoalTreeNodeDto, 'editGoalTreeNodeDto', 'editGoalTreeNode');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<GoalTreeNodeDto>({
            url: '/goaltree/{treeId}/node/{nodeId}'.replace('{treeId}', encodeURI(treeId)).replace('{nodeId}', encodeURI(nodeId)),
            method: 'PUT',
            headers,
            body: editGoalTreeNodeDto,
        }, opts?.responseOpts);
    };

    /**
     * Gets full goal tree
     */
    loadGoalTree({ treeId }: LoadGoalTreeRequest): Observable<GoalTreeFullDto>
    loadGoalTree({ treeId }: LoadGoalTreeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeFullDto>>
    loadGoalTree({ treeId }: LoadGoalTreeRequest, opts?: OperationOpts): Observable<GoalTreeFullDto | RawAjaxResponse<GoalTreeFullDto>> {
        throwIfNullOrUndefined(treeId, 'treeId', 'loadGoalTree');

        return this.request<GoalTreeFullDto>({
            url: '/goaltree/{treeId}'.replace('{treeId}', encodeURI(treeId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets goal tree
     */
    loadGoalTreeList(): Observable<Array<GoalTreeDto>>
    loadGoalTreeList(opts?: OperationOpts): Observable<RawAjaxResponse<Array<GoalTreeDto>>>
    loadGoalTreeList(opts?: OperationOpts): Observable<Array<GoalTreeDto> | RawAjaxResponse<Array<GoalTreeDto>>> {
        return this.request<Array<GoalTreeDto>>({
            url: '/goaltree',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Moves goal tree node to target position
     */
    moveGoalTreeNode({ movedNode, targetNode }: MoveGoalTreeNodeRequest): Observable<GoalTreeFullDto>
    moveGoalTreeNode({ movedNode, targetNode }: MoveGoalTreeNodeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeFullDto>>
    moveGoalTreeNode({ movedNode, targetNode }: MoveGoalTreeNodeRequest, opts?: OperationOpts): Observable<GoalTreeFullDto | RawAjaxResponse<GoalTreeFullDto>> {
        throwIfNullOrUndefined(movedNode, 'movedNode', 'moveGoalTreeNode');
        throwIfNullOrUndefined(targetNode, 'targetNode', 'moveGoalTreeNode');

        return this.request<GoalTreeFullDto>({
            url: '/goaltree/nodes/{movedNode}/move/{targetNode}'.replace('{movedNode}', encodeURI(movedNode)).replace('{targetNode}', encodeURI(targetNode)),
            method: 'PUT',
        }, opts?.responseOpts);
    };

    /**
     * Creates a new goal tree
     */
    newGoalTree({ newGoalTreeDto }: NewGoalTreeRequest): Observable<GoalTreeDto>
    newGoalTree({ newGoalTreeDto }: NewGoalTreeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeDto>>
    newGoalTree({ newGoalTreeDto }: NewGoalTreeRequest, opts?: OperationOpts): Observable<GoalTreeDto | RawAjaxResponse<GoalTreeDto>> {
        throwIfNullOrUndefined(newGoalTreeDto, 'newGoalTreeDto', 'newGoalTree');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<GoalTreeDto>({
            url: '/goaltree/new',
            method: 'POST',
            headers,
            body: newGoalTreeDto,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new node
     */
    newGoalTreeNode({ treeId, newGoalTreeNodeDto }: NewGoalTreeNodeRequest): Observable<GoalTreeNodeDto>
    newGoalTreeNode({ treeId, newGoalTreeNodeDto }: NewGoalTreeNodeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GoalTreeNodeDto>>
    newGoalTreeNode({ treeId, newGoalTreeNodeDto }: NewGoalTreeNodeRequest, opts?: OperationOpts): Observable<GoalTreeNodeDto | RawAjaxResponse<GoalTreeNodeDto>> {
        throwIfNullOrUndefined(treeId, 'treeId', 'newGoalTreeNode');
        throwIfNullOrUndefined(newGoalTreeNodeDto, 'newGoalTreeNodeDto', 'newGoalTreeNode');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<GoalTreeNodeDto>({
            url: '/goaltree/{treeId}/node/new'.replace('{treeId}', encodeURI(treeId)),
            method: 'POST',
            headers,
            body: newGoalTreeNodeDto,
        }, opts?.responseOpts);
    };

}
