// tslint:disable
/**
 * Lappuzet
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    NewNoteCategoryDto,
    NewNoteDto,
    NoteCategoryDto,
    OwnNoteDto,
} from '../models';

export interface LoadHistoryRequest {
    categoryId: number;
    start: number;
    amount: number;
}

export interface LoadUnresolvedRequest {
    categoryId: number;
}

export interface NewCategoryRequest {
    newNoteCategoryDto: NewNoteCategoryDto;
}

export interface NewNoteRequest {
    categoryId: number;
    newNoteDto: NewNoteDto;
}

export interface ResolveNoteRequest {
    noteId: number;
}

/**
 * no description
 */
export class NoteApi extends BaseAPI {

    /**
     * Gets note categories
     */
    loadCategories(): Observable<Array<NoteCategoryDto>>
    loadCategories(opts?: OperationOpts): Observable<RawAjaxResponse<Array<NoteCategoryDto>>>
    loadCategories(opts?: OperationOpts): Observable<Array<NoteCategoryDto> | RawAjaxResponse<Array<NoteCategoryDto>>> {
        return this.request<Array<NoteCategoryDto>>({
            url: '/notes/category',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets resolved notes
     */
    loadHistory({ categoryId, start, amount }: LoadHistoryRequest): Observable<Array<OwnNoteDto>>
    loadHistory({ categoryId, start, amount }: LoadHistoryRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OwnNoteDto>>>
    loadHistory({ categoryId, start, amount }: LoadHistoryRequest, opts?: OperationOpts): Observable<Array<OwnNoteDto> | RawAjaxResponse<Array<OwnNoteDto>>> {
        throwIfNullOrUndefined(categoryId, 'categoryId', 'loadHistory');
        throwIfNullOrUndefined(start, 'start', 'loadHistory');
        throwIfNullOrUndefined(amount, 'amount', 'loadHistory');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start': start,
            'amount': amount,
        };

        return this.request<Array<OwnNoteDto>>({
            url: '/notes/category/{categoryId}/history'.replace('{categoryId}', encodeURI(categoryId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets all unresolved notes
     */
    loadUnresolved({ categoryId }: LoadUnresolvedRequest): Observable<Array<OwnNoteDto>>
    loadUnresolved({ categoryId }: LoadUnresolvedRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OwnNoteDto>>>
    loadUnresolved({ categoryId }: LoadUnresolvedRequest, opts?: OperationOpts): Observable<Array<OwnNoteDto> | RawAjaxResponse<Array<OwnNoteDto>>> {
        throwIfNullOrUndefined(categoryId, 'categoryId', 'loadUnresolved');

        return this.request<Array<OwnNoteDto>>({
            url: '/notes/category/{categoryId}/unresolved'.replace('{categoryId}', encodeURI(categoryId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Creates a new note category
     */
    newCategory({ newNoteCategoryDto }: NewCategoryRequest): Observable<NoteCategoryDto>
    newCategory({ newNoteCategoryDto }: NewCategoryRequest, opts?: OperationOpts): Observable<RawAjaxResponse<NoteCategoryDto>>
    newCategory({ newNoteCategoryDto }: NewCategoryRequest, opts?: OperationOpts): Observable<NoteCategoryDto | RawAjaxResponse<NoteCategoryDto>> {
        throwIfNullOrUndefined(newNoteCategoryDto, 'newNoteCategoryDto', 'newCategory');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<NoteCategoryDto>({
            url: '/notes/category/new',
            method: 'POST',
            headers,
            body: newNoteCategoryDto,
        }, opts?.responseOpts);
    };

    /**
     * Creates a new note
     */
    newNote({ categoryId, newNoteDto }: NewNoteRequest): Observable<OwnNoteDto>
    newNote({ categoryId, newNoteDto }: NewNoteRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OwnNoteDto>>
    newNote({ categoryId, newNoteDto }: NewNoteRequest, opts?: OperationOpts): Observable<OwnNoteDto | RawAjaxResponse<OwnNoteDto>> {
        throwIfNullOrUndefined(categoryId, 'categoryId', 'newNote');
        throwIfNullOrUndefined(newNoteDto, 'newNoteDto', 'newNote');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<OwnNoteDto>({
            url: '/notes/category/{categoryId}/new'.replace('{categoryId}', encodeURI(categoryId)),
            method: 'POST',
            headers,
            body: newNoteDto,
        }, opts?.responseOpts);
    };

    /**
     * Resolve note
     */
    resolveNote({ noteId }: ResolveNoteRequest): Observable<OwnNoteDto>
    resolveNote({ noteId }: ResolveNoteRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OwnNoteDto>>
    resolveNote({ noteId }: ResolveNoteRequest, opts?: OperationOpts): Observable<OwnNoteDto | RawAjaxResponse<OwnNoteDto>> {
        throwIfNullOrUndefined(noteId, 'noteId', 'resolveNote');

        return this.request<OwnNoteDto>({
            url: '/notes/{noteId}/resolve'.replace('{noteId}', encodeURI(noteId)),
            method: 'PUT',
        }, opts?.responseOpts);
    };

}
